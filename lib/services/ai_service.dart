// lib/services/ai_service.dart
// (ARQUIVO COMPLETO ATUALIZADO v8 - Corrigido com goal_model.dart)

import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:firebase_ai/firebase_ai.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_app_check/firebase_app_check.dart';
import 'package:intl/intl.dart';
// 1. IMPORTA O PROMPT BUILDER
import 'package:sincro_app_flutter/services/ai_prompt_builder.dart';
import 'package:sincro_app_flutter/features/goals/models/goal_model.dart';
import 'package:sincro_app_flutter/features/tasks/models/task_model.dart';
import 'package:sincro_app_flutter/models/user_model.dart';
import 'package:sincro_app_flutter/services/numerology_engine.dart';

class AIService {
  static GenerativeModel? _cachedModel;

  // --- MUDAN√áA (v8): _getModel SEM generationConfig ---
  // Isso permite que a IA responda com texto (que ser√° um JSON)
  // em vez de for√ßar um JSON que conflita com o prompt.
  static GenerativeModel _getModel() {
    if (_cachedModel != null) {
      return _cachedModel!;
    }
    try {
      debugPrint("=== Inicializando modelo Gemini ===");
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        throw Exception(
            "‚ùå Usu√°rio n√£o autenticado. FirebaseAuth.instance.currentUser √© null.");
      }
      debugPrint("‚úÖ Usu√°rio autenticado: ${currentUser.uid}");

      final model = FirebaseAI.vertexAI(
        auth: FirebaseAuth.instance,
        appCheck: FirebaseAppCheck.instance,
      ).generativeModel(
        // Usando o modelo do seu JS que funciona
        model: 'gemini-2.5-flash-lite',
        // --- generationConfig REMOVIDO (Esta √© a corre√ß√£o principal do erro "Com certeza!") ---
      );

      _cachedModel = model;
      debugPrint("‚úÖ Modelo Gemini inicializado com sucesso!");
      debugPrint("üì¶ Provider: vertexAI (com App Check)");
      debugPrint("ü§ñ Modelo: ${model.model}");
      debugPrint("===================================");
      return model;
    } catch (e, stackTrace) {
      // Mant√©m seu tratamento de erro
      debugPrint("‚ùå ERRO ao inicializar o modelo Gemini: $e");
      debugPrint("üìç StackTrace: $stackTrace");
      throw Exception("Falha ao inicializar o modelo de IA.\n\n"
          "Checklist de verifica√ß√£o:\n"
          "‚úì Firebase Auth configurado? ${FirebaseAuth.instance.currentUser != null ? 'SIM' : 'N√ÉO'}\n"
          "‚úì App Check ativado? Verifique o console\n"
          "‚úì Vertex AI API habilitada no Cloud Console?\n"
          "‚úì Token de debug registrado no Firebase Console?\n\n"
          "Erro t√©cnico: ${e.toString()}");
    }
  }

  // --- M√âTODO generateSuggestions ATUALIZADO (v8) ---
  static Future<List<Map<String, String>>> generateSuggestions({
    required Goal goal,
    required UserModel user,
    required NumerologyResult numerologyResult,
    required List<TaskModel> userTasks,
    String additionalInfo = '',
  }) async {
    try {
      debugPrint("üöÄ AIService (v8): Iniciando gera√ß√£o de sugest√µes...");
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) {
        throw Exception(
            "‚ùå Usu√°rio n√£o autenticado. Por favor, fa√ßa login novamente.");
      }
      debugPrint("‚úÖ Usu√°rio autenticado: ${currentUser.uid}");

      // --- PASSO 1: Construir o Prompt (usando o builder v8) ---
      final prompt = AIPromptBuilder.buildTaskSuggestionPrompt(
        goal: goal,
        user: user,
        additionalInfo: additionalInfo,
        numerologyResult: numerologyResult,
        userTasks: userTasks,
        // --- CORRE√á√ÉO (v8): Passa a lista List<SubTask> do objeto Goal ---
        existingSubTasks: goal.subTasks,
      );

      debugPrint("üìù Prompt (v8) preparado (${prompt.length} caracteres)");
      // Descomente para depura√ß√£o completa do prompt
      // debugPrint("--- IN√çCIO DO PROMPT v8 ---");
      // debugPrint(prompt);
      // debugPrint("--- FIM DO PROMPT v8 ---");

      final generativeModel = _getModel(); // Modelo sem generationConfig
      final content = [Content.text(prompt)];

      debugPrint("ü§ñ Chamando modelo Gemini para idear tarefas e datas...");
      final response = await generativeModel.generateContent(content);
      debugPrint("‚úÖ Resposta recebida do modelo");

      String text = response.text ?? '';
      debugPrint(
          "üìÑ Resposta bruta (${text.length} caracteres): ${text.substring(0, text.length > 200 ? 200 : text.length)}...");

      // --- PASSO 3: Limpar e Parsear (L√≥gica do JS) ---
      text = text.replaceAll('```json', '').replaceAll('```', '').trim();

      // Tenta extrair APENAS o array JSON, mesmo que haja texto antes/depois
      // (Esta √© a corre√ß√£o para a resposta "Com certeza! [...]")
      final jsonMatch =
          RegExp(r'\[\s*\{.*?\}\s*\]', dotAll: true).firstMatch(text);

      if (jsonMatch != null) {
        text = jsonMatch.group(0)!;
        debugPrint(
            "‚úÖ JSON extra√≠do com sucesso: ${text.substring(0, text.length > 100 ? 100 : text.length)}...");
      } else {
        debugPrint(
            "‚ùå Falha ao extrair JSON da resposta. Resposta completa: $text");
        throw FormatException("A IA n√£o retornou um array JSON v√°lido.");
      }

      // --- PASSO 4: Validar e Formatar a Sa√≠da ---
      final List<dynamic> suggestionsJson = await compute(parseJsonList, text);
      final List<Map<String, String>> suggestions = suggestionsJson
          .map((item) {
            if (item is Map &&
                item.containsKey('title') &&
                item.containsKey('date')) {
              final dateStr = item['date'].toString();
              // Valida formato YYYY-MM-DD
              if (RegExp(r'^\d{4}-\d{2}-\d{2}$').hasMatch(dateStr)) {
                try {
                  // Verifica se a data √© futura (ou hoje)
                  final suggestedDate = DateTime.parse(dateStr);
                  final today = DateTime.now();
                  final startOfToday =
                      DateTime(today.year, today.month, today.day);
                  if (!suggestedDate.isBefore(startOfToday)) {
                    return {
                      'title': item['title'].toString(),
                      'date': dateStr,
                    };
                  } else {
                    debugPrint("‚ö†Ô∏è Data passada ignorada ($dateStr)");
                    return null;
                  }
                } catch (e) {
                  debugPrint("‚ö†Ô∏è Data inv√°lida ignorada ($dateStr): $e");
                  return null;
                }
              } else {
                debugPrint("‚ö†Ô∏è Formato de data inv√°lido ignorado: $dateStr");
                return null;
              }
            } else {
              debugPrint(
                  "‚ö†Ô∏è Item inv√°lido ignorado (faltando title ou date): $item");
              return null;
            }
          })
          .whereType<Map<String, String>>()
          .toList();

      debugPrint(
          "‚úÖ ${suggestions.length} sugest√µes V√ÅLIDAS geradas com sucesso!");
      if (suggestions.isEmpty && suggestionsJson.isNotEmpty) {
        debugPrint(
            "ü§î Nenhuma sugest√£o v√°lida foi extra√≠da, embora o JSON inicial parecesse ok.");
      } else if (suggestions.isEmpty) {
        debugPrint("ü§î A IA n√£o retornou nenhuma sugest√£o.");
        throw Exception("A IA n√£o conseguiu gerar sugest√µes para esta meta.");
      }

      return suggestions;
    } catch (e, s) {
      // Seu tratamento de erro v2 (que √© excelente)
      debugPrint("‚ùå ERRO ao gerar sugest√µes: $e");
      debugPrint("üìç StackTrace: $s");
      final errorString = e.toString().toLowerCase();
      if (errorString.contains("app check") ||
          errorString.contains("unauthenticated") ||
          errorString.contains("401") ||
          errorString.contains("403") ||
          errorString.contains("permission denied") ||
          errorString.contains("unauthorized") ||
          errorString.contains("invalid api key")) {
        throw Exception(
            "üîí Erro de Autentica√ß√£o/Permiss√£o\n\nPoss√≠veis causas:\n1. Token de debug do App Check n√£o registrado\n2. App Check n√£o configurado corretamente (reCAPTCHA v3 na Web)\n3. Vertex AI API n√£o habilitada no projeto Cloud\n4. Chave de API inv√°lida ou restrita\n5. Usu√°rio n√£o autenticado no Firebase Auth\n\nA√ß√µes:\n‚Ä¢ Verifique o console do navegador para o token de debug\n‚Ä¢ Registre o token no Firebase Console > App Check\n‚Ä¢ Confirme as configura√ß√µes do App Check e Vertex AI\n‚Ä¢ Limpe o cache e recarregue (Ctrl+Shift+R)");
      }
      if (e is FormatException || errorString.contains("json")) {
        // Este erro agora pode acontecer se a IA falar S√ì chat e nenhum JSON for encontrado
        throw Exception(
            "üìã A IA retornou um formato JSON inv√°lido ou a extra√ß√£o falhou. Tente novamente.");
      }
      if (errorString.contains("model not found") ||
          errorString.contains("invalid model name") ||
          errorString.contains("404")) {
        throw Exception(
            "ü§ñ Modelo Gemini ('gemini-1.5-flash-lite') n√£o encontrado ou inv√°lido.\n\nVerifique:\n‚Ä¢ Vertex AI API est√° habilitada no Google Cloud Console\n‚Ä¢ O nome do modelo est√° correto\n‚Ä¢ Sua regi√£o/projeto suporta este modelo");
      }
      if (errorString.contains("quota") ||
          errorString.contains("rate limit") ||
          errorString.contains("429")) {
        throw Exception(
            "‚è≥ Limite de uso da API Atingido.\n\nVoc√™ pode ter excedido a cota gratuita ou os limites de requisi√ß√£o por minuto. Verifique seu uso no Google Cloud Console e considere habilitar o faturamento ou otimizar as chamadas.");
      }
      // O erro de 'mime type' n√£o deve mais acontecer
      throw Exception(
          "üí• Erro ao comunicar com a IA\n\nDetalhes t√©cnicos: ${e.toString()}\n\nSe o problema persistir, verifique a conex√£o e as configura√ß√µes do Firebase/Google Cloud.");
    }
  }

  // M√©todo parseJsonList (Mantido - n√£o precisa alterar)
  static List<dynamic> parseJsonList(String text) {
    try {
      debugPrint("üìÑ JSON limpo recebido para parse: $text");
      return jsonDecode(text) as List<dynamic>;
    } catch (e) {
      debugPrint("‚ùå Erro ao decodificar JSON: $e");
      debugPrint("üìÑ Texto que causou o erro: $text");
      throw FormatException(
          "JSON inv√°lido recebido da IA."); // Lan√ßa FormatException
    }
  }
}
